{"version":3,"sources":["me-skin-manage.js"],"names":["SkinManager","options","name","fields","newFields","$root","jQuery","clearFields","find","i","length","addField","j","_newFields","initialize","$field","field","ID","attr","shouldInit","fieldType","fieldParams","type","className","charAt","toUpperCase","slice","Me","skinTypes","console","error","Object","keys","push","activeFields","$el","selector","terminate","_name","params","_options","_fields","window","skinType","skin","document","ready","initFields"],"mappings":"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","file":"me-skin-manage.js","sourcesContent":["class SkinManager {\n\tconstructor(options){\n\t\tthis.name     \t= \"SkinManager\";\n\t\tthis.fields   \t= [];\n\t\tthis.options \t= options;\n\t\tthis.newFields \t= [];\n\t}\n\n\tinitFields($root = jQuery('html')){\n\t\tthis.clearFields();\n\n\t\tlet fields = $root.find('[me\\\\:skin]');\n\t\tthis.newFields = [];\n\n\t\tfor (let i = 0; i < fields.length; i++) {\n\t\t\tthis.addField(jQuery(fields[i]));\n\t\t}\n\n\t\t// /* Initialize all new fields*/\n\t\tfor (let j = 0; j < this._newFields.length; j++) {\n\t\t\tthis.newFields[j].initialize();\n\t\t}\n\t}\n\n\tgetField($field){\n\t\tfor (let i in this.fields) {\n            let field = this.fields[i];\n\n            if(field.ID === $field.attr('id')){\n               return field;\n            }\n        }\n\t}\n\n\taddField($field, shouldInit = false){\n\t\tlet fieldType = $field.attr('me:skin');\n\t\tlet fieldParams = {field: $field[0], type: fieldType};\n\t\tlet className = `Skin${fieldType.charAt(0).toUpperCase()}${fieldType.slice(1)}`;\n\n\t\t/* Look if the field is valid */\n\t\tif (typeof Me.skinTypes[className] !== \"function\") {\n\t\t\tconsole.error(`The skin type ${className} does not exist. Please select one listed in the following array`, Object.keys(Me.skinTypes));\n\t\t\treturn;\n\t\t}\n\n\t\t/* Look if the field has already been rendered */\n\t\tif ($field.attr('me:skin:render')) {return;}\n\n\t\t/* Create instance of the field */\n\t\tlet field = new Me.skinTypes[className](fieldParams);\n\n\t\t/* Keep reference of the global field in this class */\n\t\tthis.fields.push(field);\n\n\t\t/* Assign the field in an array to initialize them later */\n\t\tthis.newFields.push(field);\n\n\t\tif(shouldInit){\n\t\t\tfield.initialize();\n\t\t}\n\t}\n\n\tclearFields(){\n\t\tlet activeFields  = [];\n\t\tfor (let i in this.fields) {\n\t\t\tlet field = this.fields[i];\n\n\t\t\tif(typeof field.$el == \"object\"){\n\t\t\t\tlet selector = jQuery('html').find(field.$el[0]);\n\n\t\t\t\tif (selector.length > 0) {\n\t\t\t\t\tactiveFields.push(field);\n\t\t\t\t} else {\n\t\t\t\t\tfield.terminate();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.fields = activeFields;\n\t}\n\n\tget name(){\n\t\treturn this._name;\n\t}\n\n\tset name(name){\n\t\tthis._name = name;\n\t}\n\n\tset options(params){\n\t\tthis._options = params;\n\t}\n\n\tget options(){\n\t\treturn this._options;\n\t}\n\n\tget newFields(){\n\t\treturn this._newFields;\n\t}\n\n\tset newFields(newFields){\n\t\tthis._newFields = newFields;\n\t}\n\n\tget fields(){\n\t\treturn this._fields;\n\t}\n\n\tset fields(fields){\n\t\tthis._fields = fields;\n\t}\n}\n\nif (!window.Me) {\n\twindow.Me = {};\n}\n\nif (!window.Me.skinType){\n    Me.skinTypes = [];\n}\n\nMe.skin = new SkinManager();\n\njQuery(document).ready(function() {\n\tMe.skin.initFields();\n});"],"sourceRoot":"../src"}